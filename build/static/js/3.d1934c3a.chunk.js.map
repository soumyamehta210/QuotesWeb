{"version":3,"sources":["components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","params","console","log","getSingleQuote","loadedQuote","path","exact","to","NoQuotesFound"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,MAAQ,kC,wHCSXC,EARK,SAACC,GACnB,OACE,oBAAIC,UAAWC,IAAQC,KAAvB,SACE,4BAAIH,EAAMI,U,iBCQDC,EAVM,SAACL,GACpB,OACE,oBAAIC,UAAWC,IAAQI,SAAvB,SACGN,EAAMM,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BJ,KAAMI,EAAQJ,MAA1BI,EAAQC,U,kCC6CnBC,EA5CQ,SAACV,GACtB,IAAMW,EAAiBC,mBAEvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAErBC,EAAmBlB,EAAnBkB,eAERC,qBAAU,WACO,cAAXH,GAA2BC,GAC7BC,MAED,CAACF,EAAQC,EAAOC,IAEnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAcZ,EAAea,QAAQC,MAK3CV,EAAY,CAACW,YAAa,CAAEtB,KAAMmB,GAAeI,QAAS3B,EAAM2B,UAEhEhB,EAAea,QAAQC,MAAQ,IAGjC,OACE,uBAAMxB,UAAWC,IAAQ0B,KAAMC,SAAUT,EAAzC,UACc,YAAXJ,GACC,qBAAKf,UAAU,WAAf,SACE,cAAC6B,EAAA,EAAD,MAGJ,sBAAK7B,UAAWC,IAAQ6B,QAASF,SAAUT,EAA3C,UACE,uBAAOY,QAAQ,UAAf,0BACA,0BAAUvB,GAAG,UAAUwB,KAAK,IAAIC,IAAKvB,OAEvC,qBAAKV,UAAWC,IAAQiC,QAAxB,SACE,wBAAQlC,UAAU,MAAlB,+BCoBOmC,EAxDE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAIOZ,EAFQa,cAERb,QAEP,EAAuDd,YAAQ4B,KAAvD1B,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAc0B,EAAnC,EAA6BC,KAE7BxB,qBAAU,WACRJ,EAAYY,KACX,CAACZ,EAAaY,IAEjB,IAQIrB,EAJEsC,EAAsBC,uBAAY,WACtC9B,EAAYY,KACX,CAACZ,EAAaY,IAkBjB,MAdc,YAAXX,IACDV,EAAW,qBAAKL,UAAU,WAAf,SACT,cAAC6B,EAAA,EAAD,OAIU,cAAXd,IAA2B0B,GAAkBA,EAAeI,OAAS,KACtExC,EAAW,cAAC,EAAD,CAAcA,SAAYoC,KAGzB,cAAX1B,GAA4B0B,GAA4C,IAA1BA,EAAeI,SAC9DxC,EAAW,mBAAGL,UAAU,WAAb,qCAIX,0BAASA,UAAWC,IAAQI,SAA5B,UACE,gDACEgC,GACA,wBAAQrC,UAAU,MAAM8C,QA5BC,WAC7BR,GAAmB,IA2Bf,2BAIDD,GACC,cAAC,EAAD,CACEX,QAASA,EACTT,eAAgB0B,IAGnBtC,M,iBClDQ0C,EATU,SAAChD,GACxB,OACE,yBAAQC,UAAWC,IAAQ+C,MAA3B,UACE,4BAAIjD,EAAMI,OACV,qCAAaJ,EAAMkD,a,QCiEVC,UAzDK,WAClB,IAAMC,EAAQC,cACRC,EAASd,cACfe,QAAQC,IAAIJ,GAEZ,IAAQzB,EAAY2B,EAAZ3B,QAER,EAKId,YAAQ4C,KAAgB,GAJ1B1C,EADF,EACEA,YACAC,EAFF,EAEEA,OACM0C,EAHR,EAGEf,KACA1B,EAJF,EAIEA,MAOF,OAJAE,qBAAU,WACRJ,EAAYY,KACX,CAACZ,EAAaY,IAEF,YAAXX,EAEA,qBAAKf,UAAU,WAAf,SACE,cAAC6B,EAAA,EAAD,MAKFb,EACK,mBAAGhB,UAAU,mBAAb,SAAiCgB,IAGrCyC,EAAYtD,KAKf,qCACE,cAAC,EAAD,CACEA,KAAMsD,EAAYtD,KAClB8C,OAAQQ,EAAYR,SAGtB,cAAC,IAAD,CAAOS,KAAI,kBAAaL,EAAO3B,SAAWiC,OAAK,EAA/C,SACE,qBAAK3D,UAAU,WAAf,SAEE,cAAC,IAAD,CAAMA,UAAU,YAAY4D,GAAE,kBAAaP,EAAO3B,QAApB,aAA9B,+BAMJ,cAAC,IAAD,CAAOgC,KAAI,kBAAaL,EAAO3B,QAApB,aAAX,SACE,cAAC,EAAD,SApBG,cAACmC,EAAA,EAAD","file":"static/js/3.d1934c3a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({commentData: { text: enteredText }, quoteId: props.quoteId});\n\n    commentTextRef.current.value = '';\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner></LoadingSpinner>\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from './CommentsList'\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const params = useParams();\n\n  const {quoteId} = params;\n\n  const { sendRequest, status, data: loadedComments } =  useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if(status === 'pending'){\n    comments = <div className=\"centered\">\n      <LoadingSpinner></LoadingSpinner>\n    </div>\n  }\n\n  if(status === 'completed' && (loadedComments || loadedComments.length > 0)){\n    comments = <CommentsList comments = {loadedComments }></CommentsList>\n  }\n\n  if(status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n    comments = <p className=\"centered\">No Comments Added Yet!</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\n\n// const DUMMY_QUOTES = [\n//   { id: \"q1\", author: \"Max\", text: \"Learning React is fun!\" },\n//   { id: \"q2\", author: \"Maximilian\", text: \"Learning React is Great\" },\n// ];\n\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n  console.log(match);\n\n  const { quoteId } = params;\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner></LoadingSpinner>\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <NoQuotesFound></NoQuotesFound>;\n  }\n\n  return (\n    <>\n      <HighlightedQuote\n        text={loadedQuote.text}\n        author={loadedQuote.author}\n      ></HighlightedQuote>\n      {/* path={`{match.path}`} */}\n      <Route path={`/quotes/${params.quoteId}`} exact>\n        <div className=\"centered\">\n          {/* to={`${match.url}/comments`} */}\n          <Link className=\"btn--flat\" to={`/quotes/${params.quoteId}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      {/* path={`{match.path}/comments`} */}\n      <Route path={`/quotes/${params.quoteId}/comments`}>\n        <Comments></Comments>\n      </Route>\n    </>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}